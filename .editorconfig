# Suppress: EC103 EC115 EC116
# EC103 can be ignored because this is a file designed for a broad range of projects that may not
#   include all file types it configures.
# EC115 and EC116 don't take the into account how lacking one or the other can have interactions
#   with the editor's setting in real-world situations, resulting in not applying the right
#   effective setting.  Both must be configured with the same value to ensure consistent behavior.

# Notes:
# * Comments that do not contain a space following '#' indicate rules that can be uncommented as-is
#   if the conditions leading to being  commented out no longer apply.  A space following '#' is for
#   informational comment text, including rules that *should not* be uncommented as-is.
#
# * The documentation can be difficult to navigate.  Heading comments start with asterisks.  Higher
#   heading levels have more asterisks (in contrast '#' for headings in Markdown).  These headings
#   correspond to the headings in the documentation in order to make it easier to track a rule back
#   to its origin (without littering the file with links that are largely the same), and help put
#   new rules in the right place more easily.  Not all rules have names, and the documentation mixes
#   named and unnamed rules.
#
# * Even though it's part of the base EditorConfig definition (https://editorconfig.org/), Visual
#   Studio does not support "unset" to remove a previously configured value and default to the
#   editor's own setting.
#
# * Many of the rules are defined as "none" or "silent" so as to allow for freedom to diverge from
#   the preferred style when clarity demands it.  Although not what the documentation describes as
#   the difference between these two values, this answer on Stack Overflow provides good guidance
#   for their use:  https://stackoverflow.com/a/67797444
#
# * Some rules are intentionally configured contrary to what's actually desired, so the rules in
#   this file are not to be considered normative.  These rules can affect how code is generated by
#   Visual Studio (such as the "implement interface" code fix), so they need to be configured in a
#   way that makes it easier to work with the code after it's generated.  A prime example of this is
#   the rules regarding expression-bodied members.  Members generated by Visual Studio should be
#   block-bodied to make them easier to implement.  The assumption that they can be expression-
#   bodied is incorrect far too often, and converting them (even with the Visual Studio's help) is
#   inconvenient, whereas converting a block-bodied member to expression-bodied after it's been
#   implemented is better because it can be left until it's clear that it makes to do so.
#
# * Future maintainers: There's an "EditorConfig Language Service" extension for Visual Studio
#   2017/2019 that makes it much easier to edit this file.  As of the time that this comment was
#   added, that extension was not available for Visual Studio 2022, but the source is available at
#   https://github.com/madskristensen/EditorConfigLanguage .


root = true


[*]
# No defaults are configured for indentation rules.  They must be defined for each file type.
# indent_style = space
# indent_size = 4
# tab_width = 4


[*.txt]
indent_style = tab
indent_size = 3
tab_width = 3


[*.md]
indent_style = space
indent_size = 4
tab_width = 4

trim_trailing_whitespace = false


[*.sln]
indent_style = tab
indent_size = 3
tab_width = 3

charset = utf-8-bom
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true


[*.*proj]
indent_style = space
indent_size = 2
tab_width = 2

charset = utf-8-bom
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true


[*.{targets,props,pubxml}]
indent_style = space
indent_size = 2
tab_width = 2

charset = utf-8-bom
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true


# For C# and VB, start here:
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options
# C# and VB have several shared rules (dotnet_*) and so these are configured in a combined section.
# If any VB code is introduced in the future, new code should adhere to these rules from the start.
# Any VB code that's imported may not be able to adhere to them immediately.  Any violations that
# can't be readily fixed should be suppressed with a *local* exception (a .editorconfig without
# root=true, located as close to the violations as possible, containing only the rules that need
# to be loosened).
[*.{cs,vb}]
# **** Style rules

# *** Language rules

# ** 'this.' and 'Me.' qualifier preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# ** Language keyword[s...] preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# ** Modifier preferences
# This rule doesn't account for partial types.  Partial types should only have the accessibility
# modifier on one part, but this rule applies it to all parts.
#dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
dotnet_style_readonly_field = true:suggestion

# ** Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:none
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:none
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:none
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:none

# ** Expression-level preferences
dotnet_style_object_initializer = true:none
dotnet_style_collection_initializer = true:none
dotnet_style_prefer_auto_properties = true:none
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:none
dotnet_style_prefer_inferred_anonymous_type_member_names = false:none
dotnet_style_prefer_conditional_expression_over_assignment = true:none
dotnet_style_prefer_conditional_expression_over_return = true:none
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
# "Add missing cases to switch statement"
# If configured as "suggestion", this will show up even when you have a default case.  In practical
# scenarios, this is unacceptable noise because the default case is intended to cover those other
# cases, so "none" is ideal.  The code fix is *not* made available.
dotnet_diagnostic.IDE0010.severity = none
# "Use 'System.HashCode.Combine'"
dotnet_diagnostic.IDE0070.severity = suggestion
# "Convert typeof to nameof"
dotnet_diagnostic.IDE0082.severity = suggestion

# ** Null-checking preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# *** Unnecessary code rules
# "Remove unused private member"
dotnet_diagnostic.IDE0051.severity = none
# "Remove unread private member"
dotnet_diagnostic.IDE0052.severity = none
dotnet_code_quality_unused_parameters = all:none
dotnet_remove_unnecessary_suppression_exclusions = true:none
# "Remove unnecessary suppression"
# The IDE seems to think the all inline suppressions are unnecessary rather then determining it
# based on the code.  If you suppress something, you then get a message about it being unnecessary,
# which is ridiculous.
dotnet_diagnostic.IDE0079.severity = none
# "Remove unnecessary suppression operator"
# TODO: Determine the default for this.
dotnet_diagnostic.IDE0080.severity = suggestion
# "Remove redundant equality"
# It requires that "booleanExpression == true" is reduced to "booleanExpression".  Unfortunately,
# this rule can't also require that "booleanExpression == false" is reduced to "!booleanExpression".
# It should also treat "is" as "==" but it doesn't.
dotnet_diagnostic.IDE0100.severity = error
# "Remove unnecessary discard"
dotnet_diagnostic.IDE0110.severity = none

# *** Miscellaneous rules

# *** Formatting rules
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# *** Naming rules

# This allows "create and assign field" (previously "introduce and initialize field") refactoring
# to generate the field as "_camelCase".  The additional rules prevent the overreach it otherwise
# causes, restoring the convention that private const fields are "PascalCase".
dotnet_naming_style.underscore_camel_case.capitalization = camel_case
dotnet_naming_style.underscore_camel_case.required_prefix = _
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_const_fields.applicable_kinds = field
dotnet_naming_symbols.private_const_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_const_fields.required_modifiers = const

dotnet_naming_rule.private_fields_must_be_underscore_camel_case.symbols = private_fields
dotnet_naming_rule.private_fields_must_be_underscore_camel_case.style = underscore_camel_case
dotnet_naming_rule.private_fields_must_be_underscore_camel_case.severity = suggestion
dotnet_naming_rule.private_const_fields_must_be_pascal_case.symbols = private_const_fields
dotnet_naming_rule.private_const_fields_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.private_const_fields_must_be_pascal_case.severity = suggestion


[*.cs]
indent_style = space
indent_size = 4
tab_width = 4

charset = utf-8-bom
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# **** Style rules

# *** Language rules

# ** 'var' preferences
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = false:none
csharp_style_var_elsewhere = false:none

# ** Expression-bodied members
# One should prefer expression-bodied members when the whole member fits on a line, but setting
# these to true causes the IDE to generate them as expression-bodied, which is often unhelpful. It
# should be determined after the member is written whether to make it expression-bodied.  This can
# be done quickly and easily because the IDE provides the code fix, and its inverse, regardless of
# this value.  However, constructors should have block bodies, and local functions should lean in
# that direction as they are generally not quickly discernable as local functions, and even more so
# when they're expression-bodied.
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = false:none
csharp_style_expression_bodied_indexers = false:none
csharp_style_expression_bodied_accessors = false:none
csharp_style_expression_bodied_lambdas = false:none
csharp_style_expression_bodied_local_functions = false:none

# ** Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:none
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion

# ** Expression-level preferences
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:none
csharp_style_pattern_local_over_anonymous_function = false:none
# "Use local function"
# The "csharp_style_pattern_local_over_anonymous_function" rule above might affect how code is
# generated by the IDE but it doesn't look at existing code, unless disabled by number.
dotnet_diagnostic.IDE0039.severity = none
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:none
# "Add missing cases to switch expression"
# If configured as "suggestion", this will show up even when you have a default case.  In practical
# scenarios, this is unacceptable noise because the default case is intended to cover those other
# cases, so "none" is ideal.  The code fix is still available, if needed.
dotnet_diagnostic.IDE0072.severity = none
csharp_style_prefer_tuple_swap = true:suggestion

# ** "Null" checking preferences
csharp_style_throw_expression = true:none
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion

# ** Code block preferences
csharp_prefer_braces = when_multiline:none
csharp_prefer_simple_using_statement = false:none

# ** 'using' directive preferences
csharp_using_directive_placement = outside_namespace:silent

# ** Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
csharp_prefer_static_local_function = true:suggestion
# "Make struct fields writable"
# This rule only applies when "this =" is used in any struct member other than the constructor,
# which circumvents readonly protections.
dotnet_diagnostic.IDE0064.severity = suggestion

# ** Namespace declaration preferences
csharp_style_namespace_declarations = file_scoped:suggestion

# *** Code quality rules

# ** Usage rules

# 'throw ex;' is disallowed; requires 'throw;'
dotnet_diagnostic.CA2200.severity = error
# "This async method lacks 'await' operators..."
# This creates large amounts of noise when trying to implement large API surface areas.
dotnet_diagnostic.CS1998.severity = silent

# *** Unnecessary code rules

csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_style_unused_value_assignment_preference = discard_variable:suggestion

# *** Formatting rules

# ** New-line options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# ** Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true

# ** Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# ** Wrap options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

## *** Naming rules


[*.vb]
indent_style = space
indent_size = 4
tab_width = 4

charset = utf-8-bom
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# *** Language rules

# ** Modifier preferences
visual_basic_preferred_modifier_order = Partial,Public,Private,Protected,Friend,Shared,Static,Shadows,Overridable,MustOverride,NotOverridable,Overloads,Overrides,MustInherit,NotInheritable,Default,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion

# ** Pattern matching preferences (this isn't really pattern matching in VB, though)
visual_basic_style_prefer_isnot_expression = true

# *** Unnecessary code rules
visual_basic_style_unused_value_expression_statement_preference = unused_local_variable:silent
visual_basic_style_unused_value_assignment_preference = unused_local_variable:suggestion
visual_basic_style_prefer_simplified_object_creation = true:suggestion

# "Remove 'ByVal'"
dotnet_diagnostic.IDE0081.severity = warning


[*.{xml,resx}]
indent_style = space
indent_size = 2
tab_width = 2

charset = utf-8


[*.{config,nuspec}]
indent_style = space
indent_size = 2
tab_width = 2


[*.json]
indent_style = space
indent_size = 2
tab_width = 2

charset = utf-8
insert_final_newline = true


[*.cshtml]
indent_style = space
indent_size = 4
tab_width = 4

charset = utf-8
insert_final_newline = true


[*.{js,jsx,ts,tsx}]
indent_style = space
indent_size = 4
tab_width = 4

charset = utf-8
insert_final_newline = true
